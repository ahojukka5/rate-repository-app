{"version":3,"sources":["src/theme.js","src/components/AppBar.jsx","src/graphql/queries.js","src/hooks/useRepositories.js","src/components/Text.jsx","src/components/RepositoryItem.jsx","src/components/RepositoryList.jsx","src/components/TextInput.jsx","src/components/FormikTextInput.jsx","src/components/SignIn.jsx","src/components/Main.jsx","App.js","src/utils/apolloClient.js","web-build/register-service-worker.js"],"names":["theme","colors","textPrimary","textSecondary","primary","blue","gray","dark","light","white","fontSizes","body","subheading","heading","fonts","main","Platform","select","android","ios","default","fontWeights","normal","bold","styles","StyleSheet","create","container","display","flexDirection","marginTop","Constants","statusBarHeight","padding","backgroundColor","text","margin","color","fontSize","fontWeight","AppBar","TouchableWithoutFeedback","View","style","ScrollView","horizontal","Link","to","GET_REPOSITORIES","gql","useRepositories","useQuery","fetchPolicy","data","loading","repositories","fontFamily","colorTextSecondary","colorPrimary","fontSizeSubheading","fontSizeHeading","fontWeightBold","label","paddingLeft","paddingRight","paddingTop","paddingBottom","borderRadius","paragraph","Text","title","subtitle","props","textStyle","cardTop","justifyContent","tinyLogo","marginRight","flexGrow","width","height","infoBlock","flexShrink","languages","cardBottom","alignItems","statisticsBlock","Statistic","number","count","what","toFixed","RepositoryItem","item","Image","source","uri","ownerAvatarUrl","fullName","description","language","stargazersCount","forksCount","reviewCount","ratingAverage","separator","ItemSeparator","RepositoryList","repositoryNodes","edges","map","edge","node","FlatList","ItemSeparatorComponent","renderItem","key","id","input","borderColor","borderWidth","error","TextInput","textInputStyle","errorText","FormikTextInput","name","useField","field","meta","helpers","showError","touched","onChangeText","value","setValue","onBlur","setTouched","login","button","marginBottom","textAlign","SignInForm","onSubmit","placeholder","secureTextEntry","onPress","SignIn","initialValues","username","password","values","alert","validationSchema","yup","shape","required","handleSubmit","Main","path","exact","apolloClient","manifest","extra","APOLLO_URI","ApolloClient","createApolloClient","App","NativeRouter","client","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","console"],"mappings":"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","file":"static/js/app.d4b88a11.chunk.js","sourcesContent":["import { Platform } from 'react-native';\n\nconst theme = {\n  colors: {\n    textPrimary: '#24292e',\n    textSecondary: '#586069',\n    primary: '#0366d6',\n    blue: '#0965d2',\n    gray: '#e1e5e8',\n    dark: '#25292c',\n    light: '#f5f9fa',\n    white: '#ffffff',\n  },\n  fontSizes: {\n    body: 14,\n    subheading: 16,\n    heading: 20,\n  },\n  fonts: {\n    main: Platform.select({\n      android: 'Roboto',\n      ios: 'Arial',\n      default: 'System',\n    }),\n  },\n  fontWeights: {\n    normal: '400',\n    bold: '700',\n  },\n};\n\nexport default theme;\n","import React from 'react';\nimport {\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport Constants from 'expo-constants';\nimport { Link } from 'react-router-native';\n\nimport theme from '../theme';\n\nconst styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginTop: Constants.statusBarHeight,\n    padding: 5,\n    backgroundColor: theme.colors.dark,\n  },\n  text: {\n    margin: 10,\n    color: theme.colors.light,\n    fontSize: theme.fontSizes.heading,\n    fontWeight: theme.fontWeights.bold,\n  },\n});\n\nconst AppBar = () => {\n  return (\n    <TouchableWithoutFeedback>\n      <View style={styles.container}>\n        <ScrollView horizontal>\n          <Link to=\"/signin\">\n            <Text style={styles.text}>Sign in</Text>\n          </Link>\n          <Link to=\"/\">\n            <Text style={styles.text}>Repositories</Text>\n          </Link>\n        </ScrollView>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nexport default AppBar;\n","import { gql } from 'apollo-boost';\n\nexport const GET_REPOSITORIES = gql`\n  query {\n    repositories {\n      edges {\n        node {\n          id\n          fullName\n          description\n          language\n          forksCount\n          stargazersCount\n          ratingAverage\n          reviewCount\n          ownerAvatarUrl\n        }\n      }\n    }\n  }\n`;\n","import { useQuery } from '@apollo/react-hooks';\n\nimport { GET_REPOSITORIES } from '../graphql/queries';\n\nconst useRepositories = () => {\n  const { data, loading } = useQuery(GET_REPOSITORIES, {\n    fetchPolicy: 'cache-and-network',\n  });\n  return { loading, repositories: data ? data.repositories : null };\n};\n\nexport default useRepositories;\n","import React from 'react';\nimport { Text as NativeText, StyleSheet } from 'react-native';\n\nimport theme from '../theme';\n\nconst styles = StyleSheet.create({\n  text: {\n    color: theme.colors.textPrimary,\n    fontSize: theme.fontSizes.body,\n    fontFamily: theme.fonts.main,\n    fontWeight: theme.fontWeights.normal,\n  },\n  colorTextSecondary: {\n    color: theme.colors.textSecondary,\n  },\n  colorPrimary: {\n    color: theme.colors.primary,\n  },\n  fontSizeSubheading: {\n    fontSize: theme.fontSizes.subheading,\n  },\n  fontSizeHeading: {\n    fontSize: theme.fontSizes.heading,\n  },\n  fontWeightBold: {\n    fontWeight: theme.fontWeights.bold,\n  },\n  label: {\n    color: theme.colors.white,\n    backgroundColor: theme.colors.blue,\n    fontWeight: theme.fontWeights.bold,\n    paddingLeft: 5,\n    paddingRight: 5,\n    paddingTop: 2,\n    paddingBottom: 2,\n    margin: 1,\n    borderRadius: 7,\n  },\n  paragraph: {\n    paddingTop: 2,\n    paddingBottom: 2,\n  }\n});\n\nconst Text = ({\n  bold,\n  color,\n  fontSize,\n  fontWeight,\n  label,\n  title,\n  subtitle,\n  paragraph,\n  style,\n  ...props\n}) => {\n  const textStyle = [\n    styles.text,\n    color === 'textSecondary' && styles.colorTextSecondary,\n    color === 'primary' && styles.colorPrimary,\n    fontSize === 'subheading' && styles.fontSizeSubheading,\n    fontWeight === 'bold' && styles.fontWeightBold,\n    bold && styles.fontWeightBold,\n    title && styles.fontSizeHeading,\n    subtitle && styles.fontSizeSubheading,\n    label && styles.label,\n    paragraph && styles.paragraph,\n    style,\n  ];\n\n  return <NativeText style={textStyle} {...props} />;\n};\n\nexport default Text;\n","import React from 'react';\nimport { Image, StyleSheet, View } from 'react-native';\nimport Text from './Text';\n\nconst styles = StyleSheet.create({\n  // Main container\n  container: {\n    paddingLeft: 15,\n    paddingRight: 15,\n    paddingTop: 15,\n    paddingBottom: 5,\n    display: 'flex',\n    flexDirection: 'column',\n  },\n\n  // Top part of card, having avatar and information\n  cardTop: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  tinyLogo: {\n    marginRight: 10,\n    flexGrow: 0,\n    width: 50,\n    height: 50,\n  },\n  infoBlock: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  languages: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n\n  // Bottom part of card, having statistics\n  cardBottom: {\n    padding: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  statisticsBlock: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n\nconst Statistic = ({ count, what }) => {\n  const formatNumber = (number) => {\n    if (number < 1000) {\n      return number;\n    }\n    return (number / 1000).toFixed(1) + 'k';\n  };\n  return (\n    <View style={styles.statisticsBlock}>\n      <Text bold>{formatNumber(count)}</Text>\n      <Text>{what}</Text>\n    </View>\n  );\n};\n\nconst RepositoryItem = ({ item }) => {\n  return (\n    <View style={styles.container}>\n      <View style={styles.cardTop}>\n        <Image style={styles.tinyLogo} source={{ uri: item.ownerAvatarUrl }} />\n        <View style={styles.infoBlock}>\n          <Text bold subtitle>\n            {item.fullName}\n          </Text>\n          <Text paragraph>{item.description}</Text>\n          <View style={styles.languages}>\n            <Text label>{item.language}</Text>\n          </View>\n        </View>\n      </View>\n      <View style={styles.cardBottom}>\n        <Statistic what=\"Stars\" count={item.stargazersCount} />\n        <Statistic what=\"Forks\" count={item.forksCount} />\n        <Statistic what=\"Reviews\" count={item.reviewCount} />\n        <Statistic what=\"Rating\" count={item.ratingAverage} />\n      </View>\n    </View>\n  );\n};\n\nexport default RepositoryItem;\n","import React from 'react';\nimport { FlatList, View, StyleSheet } from 'react-native';\n\nimport useRepositories from '../hooks/useRepositories';\nimport theme from '../theme';\nimport RepositoryItem from './RepositoryItem';\n\nconst styles = StyleSheet.create({\n  separator: {\n    height: 10,\n    backgroundColor: theme.colors.gray,\n  },\n});\n\nconst ItemSeparator = () => <View style={styles.separator} />;\n\nconst RepositoryList = () => {\n  const { repositories } = useRepositories();\n\n  // Get the nodes from the edges array\n  const repositoryNodes = repositories\n    ? repositories.edges.map((edge) => edge.node)\n    : [];\n\n  return (\n    <FlatList\n      data={repositoryNodes}\n      ItemSeparatorComponent={ItemSeparator}\n      renderItem={({ item }) => <RepositoryItem key={item.id} item={item} />}\n    />\n  );\n};\n\nexport default RepositoryList;\n","import React from 'react';\nimport { TextInput as NativeTextInput, StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  input: {\n    padding: 10,\n    paddingLeft: 20,\n    paddingRight: 20,\n    marginTop: 10,\n    backgroundColor: 'white',\n    borderColor: 'gray',\n    borderRadius: 7,\n    borderWidth: 1,\n    fontSize: 14,\n  },\n  error: {\n    borderColor: 'red',\n  },\n});\n\nconst TextInput = ({ style, error, ...props }) => {\n  const textInputStyle = [styles.input, error && styles.error, style];\n\n  return <NativeTextInput style={textInputStyle} {...props} />;\n};\n\nexport default TextInput;\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { useField } from 'formik';\n\nimport TextInput from './TextInput';\nimport Text from './Text';\n\nconst styles = StyleSheet.create({\n  errorText: {\n    color: 'red',\n  },\n});\n\nconst FormikTextInput = ({ name, ...props }) => {\n  const [field, meta, helpers] = useField(name);\n  const showError = meta.touched && meta.error;\n\n  return (\n    <>\n      <TextInput\n        name={name}\n        onChangeText={(value) => helpers.setValue(value)}\n        onBlur={() => helpers.setTouched(true)}\n        value={field.value}\n        error={showError}\n        {...props}\n      />\n      {showError && <Text style={styles.errorText}>{meta.error}</Text>}\n    </>\n  );\n};\n\nexport default FormikTextInput;\n","import React from 'react';\nimport { TouchableWithoutFeedback, StyleSheet, View } from 'react-native';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport theme from '../theme';\nimport Text from './Text';\nimport TextInput from './FormikTextInput';\n\nconst styles = StyleSheet.create({\n  login: {\n    margin: 10,\n  },\n  button: {\n    padding: 10,\n    marginTop: 5,\n    marginBottom: 5,\n    backgroundColor: theme.colors.primary,\n    borderColor: 'black',\n    borderRadius: 7,\n    borderWidth: 1,\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});\n\nconst SignInForm = ({ onSubmit }) => {\n  return (\n    <View style={styles.login}>\n      <TextInput name=\"username\" placeholder=\"Username\" />\n      <TextInput name=\"password\" placeholder=\"Password\" secureTextEntry />\n      <TouchableWithoutFeedback onPress={onSubmit}>\n        <Text style={styles.button}>Sign in</Text>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nconst SignIn = () => {\n  const initialValues = {\n    username: '',\n    password: '',\n  };\n\n  const onSubmit = (values) => {\n    alert(`logging in with username ${values.username} and password ********`);\n  };\n\n  const validationSchema = yup.object().shape({\n    username: yup.string().required('Username is required'),\n    password: yup.string().required('Password is required'),\n  });\n\n  const props = { initialValues, onSubmit, validationSchema };\n\n  const render = ({ handleSubmit }) => {\n    return <SignInForm onSubmit={handleSubmit} />;\n  };\n\n  return <Formik {...props}>{render}</Formik>;\n};\n\nexport default SignIn;\n","import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Route, Switch, Redirect } from 'react-router-native';\n\nimport AppBar from './AppBar';\nimport RepositoryList from './RepositoryList';\nimport SignIn from './SignIn';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nconst Main = () => {\n  return (\n    <View style={styles.container}>\n      <AppBar />\n      <Switch>\n        <Route path=\"/\" exact>\n          <RepositoryList />\n        </Route>\n        <Route path=\"/signin\" exact>\n          <SignIn />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    </View>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { NativeRouter } from 'react-router-native';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport Main from './src/components/Main';\nimport createApolloClient from './src/utils/apolloClient';\n\nconst apolloClient = createApolloClient();\n\nconst App = () => {\n  return (\n    <NativeRouter>\n      <ApolloProvider client={apolloClient}>\n        <Main />\n      </ApolloProvider>\n    </NativeRouter>\n  );\n};\n\nexport default App;\n","import ApolloClient from 'apollo-boost';\nimport Constants from 'expo-constants';\n\nconst createApolloClient = () => {\n  const uri = Constants.manifest.extra.APOLLO_URI;\n  return new ApolloClient({ uri });\n};\n\nexport default createApolloClient;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/rate-repository-app/expo-service-worker.js', { scope: '/rate-repository-app/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}